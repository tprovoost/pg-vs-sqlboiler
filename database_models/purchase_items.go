// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PurchaseItem is an object representing the database table.
type PurchaseItem struct {
	ID         int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	PurchaseID null.Int          `boil:"purchase_id" json:"purchase_id,omitempty" toml:"purchase_id" yaml:"purchase_id,omitempty"`
	ProductID  null.Int          `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	Price      types.NullDecimal `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Quantity   null.Int          `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	State      null.String       `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`

	R *purchaseItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L purchaseItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PurchaseItemColumns = struct {
	ID         string
	PurchaseID string
	ProductID  string
	Price      string
	Quantity   string
	State      string
}{
	ID:         "id",
	PurchaseID: "purchase_id",
	ProductID:  "product_id",
	Price:      "price",
	Quantity:   "quantity",
	State:      "state",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PurchaseItemWhere = struct {
	ID         whereHelperint
	PurchaseID whereHelpernull_Int
	ProductID  whereHelpernull_Int
	Price      whereHelpertypes_NullDecimal
	Quantity   whereHelpernull_Int
	State      whereHelpernull_String
}{
	ID:         whereHelperint{field: "\"purchase_items\".\"id\""},
	PurchaseID: whereHelpernull_Int{field: "\"purchase_items\".\"purchase_id\""},
	ProductID:  whereHelpernull_Int{field: "\"purchase_items\".\"product_id\""},
	Price:      whereHelpertypes_NullDecimal{field: "\"purchase_items\".\"price\""},
	Quantity:   whereHelpernull_Int{field: "\"purchase_items\".\"quantity\""},
	State:      whereHelpernull_String{field: "\"purchase_items\".\"state\""},
}

// PurchaseItemRels is where relationship names are stored.
var PurchaseItemRels = struct {
	Product  string
	Purchase string
}{
	Product:  "Product",
	Purchase: "Purchase",
}

// purchaseItemR is where relationships are stored.
type purchaseItemR struct {
	Product  *Product  `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Purchase *Purchase `boil:"Purchase" json:"Purchase" toml:"Purchase" yaml:"Purchase"`
}

// NewStruct creates a new relationship struct
func (*purchaseItemR) NewStruct() *purchaseItemR {
	return &purchaseItemR{}
}

// purchaseItemL is where Load methods for each relationship are stored.
type purchaseItemL struct{}

var (
	purchaseItemAllColumns            = []string{"id", "purchase_id", "product_id", "price", "quantity", "state"}
	purchaseItemColumnsWithoutDefault = []string{"purchase_id", "product_id", "price", "quantity", "state"}
	purchaseItemColumnsWithDefault    = []string{"id"}
	purchaseItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// PurchaseItemSlice is an alias for a slice of pointers to PurchaseItem.
	// This should generally be used opposed to []PurchaseItem.
	PurchaseItemSlice []*PurchaseItem
	// PurchaseItemHook is the signature for custom PurchaseItem hook methods
	PurchaseItemHook func(context.Context, boil.ContextExecutor, *PurchaseItem) error

	purchaseItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchaseItemType                 = reflect.TypeOf(&PurchaseItem{})
	purchaseItemMapping              = queries.MakeStructMapping(purchaseItemType)
	purchaseItemPrimaryKeyMapping, _ = queries.BindMapping(purchaseItemType, purchaseItemMapping, purchaseItemPrimaryKeyColumns)
	purchaseItemInsertCacheMut       sync.RWMutex
	purchaseItemInsertCache          = make(map[string]insertCache)
	purchaseItemUpdateCacheMut       sync.RWMutex
	purchaseItemUpdateCache          = make(map[string]updateCache)
	purchaseItemUpsertCacheMut       sync.RWMutex
	purchaseItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var purchaseItemBeforeInsertHooks []PurchaseItemHook
var purchaseItemBeforeUpdateHooks []PurchaseItemHook
var purchaseItemBeforeDeleteHooks []PurchaseItemHook
var purchaseItemBeforeUpsertHooks []PurchaseItemHook

var purchaseItemAfterInsertHooks []PurchaseItemHook
var purchaseItemAfterSelectHooks []PurchaseItemHook
var purchaseItemAfterUpdateHooks []PurchaseItemHook
var purchaseItemAfterDeleteHooks []PurchaseItemHook
var purchaseItemAfterUpsertHooks []PurchaseItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PurchaseItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PurchaseItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PurchaseItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PurchaseItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PurchaseItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PurchaseItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PurchaseItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PurchaseItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PurchaseItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchaseItemHook registers your hook function for all future operations.
func AddPurchaseItemHook(hookPoint boil.HookPoint, purchaseItemHook PurchaseItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		purchaseItemBeforeInsertHooks = append(purchaseItemBeforeInsertHooks, purchaseItemHook)
	case boil.BeforeUpdateHook:
		purchaseItemBeforeUpdateHooks = append(purchaseItemBeforeUpdateHooks, purchaseItemHook)
	case boil.BeforeDeleteHook:
		purchaseItemBeforeDeleteHooks = append(purchaseItemBeforeDeleteHooks, purchaseItemHook)
	case boil.BeforeUpsertHook:
		purchaseItemBeforeUpsertHooks = append(purchaseItemBeforeUpsertHooks, purchaseItemHook)
	case boil.AfterInsertHook:
		purchaseItemAfterInsertHooks = append(purchaseItemAfterInsertHooks, purchaseItemHook)
	case boil.AfterSelectHook:
		purchaseItemAfterSelectHooks = append(purchaseItemAfterSelectHooks, purchaseItemHook)
	case boil.AfterUpdateHook:
		purchaseItemAfterUpdateHooks = append(purchaseItemAfterUpdateHooks, purchaseItemHook)
	case boil.AfterDeleteHook:
		purchaseItemAfterDeleteHooks = append(purchaseItemAfterDeleteHooks, purchaseItemHook)
	case boil.AfterUpsertHook:
		purchaseItemAfterUpsertHooks = append(purchaseItemAfterUpsertHooks, purchaseItemHook)
	}
}

// One returns a single purchaseItem record from the query.
func (q purchaseItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PurchaseItem, error) {
	o := &PurchaseItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for purchase_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PurchaseItem records from the query.
func (q purchaseItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (PurchaseItemSlice, error) {
	var o []*PurchaseItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PurchaseItem slice")
	}

	if len(purchaseItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PurchaseItem records in the query.
func (q purchaseItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count purchase_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchaseItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if purchase_items exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *PurchaseItem) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// Purchase pointed to by the foreign key.
func (o *PurchaseItem) Purchase(mods ...qm.QueryMod) purchaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PurchaseID),
	}

	queryMods = append(queryMods, mods...)

	query := Purchases(queryMods...)
	queries.SetFrom(query.Query, "\"purchases\"")

	return query
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchaseItemL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybePurchaseItem interface{}, mods queries.Applicator) error {
	var slice []*PurchaseItem
	var object *PurchaseItem

	if singular {
		object = maybePurchaseItem.(*PurchaseItem)
	} else {
		slice = *maybePurchaseItem.(*[]*PurchaseItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchaseItemR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchaseItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(purchaseItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.PurchaseItems = append(foreign.R.PurchaseItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.PurchaseItems = append(foreign.R.PurchaseItems, local)
				break
			}
		}
	}

	return nil
}

// LoadPurchase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchaseItemL) LoadPurchase(ctx context.Context, e boil.ContextExecutor, singular bool, maybePurchaseItem interface{}, mods queries.Applicator) error {
	var slice []*PurchaseItem
	var object *PurchaseItem

	if singular {
		object = maybePurchaseItem.(*PurchaseItem)
	} else {
		slice = *maybePurchaseItem.(*[]*PurchaseItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchaseItemR{}
		}
		if !queries.IsNil(object.PurchaseID) {
			args = append(args, object.PurchaseID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchaseItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PurchaseID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PurchaseID) {
				args = append(args, obj.PurchaseID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`purchases`),
		qm.WhereIn(`purchases.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Purchase")
	}

	var resultSlice []*Purchase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Purchase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for purchases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for purchases")
	}

	if len(purchaseItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Purchase = foreign
		if foreign.R == nil {
			foreign.R = &purchaseR{}
		}
		foreign.R.PurchaseItems = append(foreign.R.PurchaseItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PurchaseID, foreign.ID) {
				local.R.Purchase = foreign
				if foreign.R == nil {
					foreign.R = &purchaseR{}
				}
				foreign.R.PurchaseItems = append(foreign.R.PurchaseItems, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the purchaseItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.PurchaseItems.
func (o *PurchaseItem) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, purchaseItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &purchaseItemR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			PurchaseItems: PurchaseItemSlice{o},
		}
	} else {
		related.R.PurchaseItems = append(related.R.PurchaseItems, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PurchaseItem) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PurchaseItems {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.PurchaseItems)
		if ln > 1 && i < ln-1 {
			related.R.PurchaseItems[i] = related.R.PurchaseItems[ln-1]
		}
		related.R.PurchaseItems = related.R.PurchaseItems[:ln-1]
		break
	}
	return nil
}

// SetPurchase of the purchaseItem to the related item.
// Sets o.R.Purchase to related.
// Adds o to related.R.PurchaseItems.
func (o *PurchaseItem) SetPurchase(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Purchase) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"purchase_id"}),
		strmangle.WhereClause("\"", "\"", 2, purchaseItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PurchaseID, related.ID)
	if o.R == nil {
		o.R = &purchaseItemR{
			Purchase: related,
		}
	} else {
		o.R.Purchase = related
	}

	if related.R == nil {
		related.R = &purchaseR{
			PurchaseItems: PurchaseItemSlice{o},
		}
	} else {
		related.R.PurchaseItems = append(related.R.PurchaseItems, o)
	}

	return nil
}

// RemovePurchase relationship.
// Sets o.R.Purchase to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PurchaseItem) RemovePurchase(ctx context.Context, exec boil.ContextExecutor, related *Purchase) error {
	var err error

	queries.SetScanner(&o.PurchaseID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("purchase_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Purchase = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PurchaseItems {
		if queries.Equal(o.PurchaseID, ri.PurchaseID) {
			continue
		}

		ln := len(related.R.PurchaseItems)
		if ln > 1 && i < ln-1 {
			related.R.PurchaseItems[i] = related.R.PurchaseItems[ln-1]
		}
		related.R.PurchaseItems = related.R.PurchaseItems[:ln-1]
		break
	}
	return nil
}

// PurchaseItems retrieves all the records using an executor.
func PurchaseItems(mods ...qm.QueryMod) purchaseItemQuery {
	mods = append(mods, qm.From("\"purchase_items\""))
	return purchaseItemQuery{NewQuery(mods...)}
}

// FindPurchaseItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPurchaseItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PurchaseItem, error) {
	purchaseItemObj := &PurchaseItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, purchaseItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from purchase_items")
	}

	return purchaseItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PurchaseItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no purchase_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchaseItemInsertCacheMut.RLock()
	cache, cached := purchaseItemInsertCache[key]
	purchaseItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchaseItemAllColumns,
			purchaseItemColumnsWithDefault,
			purchaseItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(purchaseItemType, purchaseItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchaseItemType, purchaseItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into purchase_items")
	}

	if !cached {
		purchaseItemInsertCacheMut.Lock()
		purchaseItemInsertCache[key] = cache
		purchaseItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PurchaseItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PurchaseItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	purchaseItemUpdateCacheMut.RLock()
	cache, cached := purchaseItemUpdateCache[key]
	purchaseItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			purchaseItemAllColumns,
			purchaseItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update purchase_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, purchaseItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(purchaseItemType, purchaseItemMapping, append(wl, purchaseItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update purchase_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for purchase_items")
	}

	if !cached {
		purchaseItemUpdateCacheMut.Lock()
		purchaseItemUpdateCache[key] = cache
		purchaseItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q purchaseItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for purchase_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for purchase_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PurchaseItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchaseItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, purchaseItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in purchaseItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all purchaseItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PurchaseItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no purchase_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchaseItemUpsertCacheMut.RLock()
	cache, cached := purchaseItemUpsertCache[key]
	purchaseItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			purchaseItemAllColumns,
			purchaseItemColumnsWithDefault,
			purchaseItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			purchaseItemAllColumns,
			purchaseItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert purchase_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(purchaseItemPrimaryKeyColumns))
			copy(conflict, purchaseItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(purchaseItemType, purchaseItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchaseItemType, purchaseItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert purchase_items")
	}

	if !cached {
		purchaseItemUpsertCacheMut.Lock()
		purchaseItemUpsertCache[key] = cache
		purchaseItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PurchaseItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PurchaseItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PurchaseItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), purchaseItemPrimaryKeyMapping)
	sql := "DELETE FROM \"purchase_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from purchase_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for purchase_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q purchaseItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no purchaseItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from purchase_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for purchase_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PurchaseItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(purchaseItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchaseItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, purchaseItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from purchaseItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for purchase_items")
	}

	if len(purchaseItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PurchaseItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPurchaseItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PurchaseItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PurchaseItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchaseItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase_items\".* FROM \"purchase_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, purchaseItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PurchaseItemSlice")
	}

	*o = slice

	return nil
}

// PurchaseItemExists checks if the PurchaseItem row exists.
func PurchaseItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if purchase_items exists")
	}

	return exists, nil
}
