// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Products", testProducts)
	t.Run("PurchaseItems", testPurchaseItems)
	t.Run("Purchases", testPurchases)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Products", testProductsDelete)
	t.Run("PurchaseItems", testPurchaseItemsDelete)
	t.Run("Purchases", testPurchasesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("PurchaseItems", testPurchaseItemsQueryDeleteAll)
	t.Run("Purchases", testPurchasesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("PurchaseItems", testPurchaseItemsSliceDeleteAll)
	t.Run("Purchases", testPurchasesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Products", testProductsExists)
	t.Run("PurchaseItems", testPurchaseItemsExists)
	t.Run("Purchases", testPurchasesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Products", testProductsFind)
	t.Run("PurchaseItems", testPurchaseItemsFind)
	t.Run("Purchases", testPurchasesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Products", testProductsBind)
	t.Run("PurchaseItems", testPurchaseItemsBind)
	t.Run("Purchases", testPurchasesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Products", testProductsOne)
	t.Run("PurchaseItems", testPurchaseItemsOne)
	t.Run("Purchases", testPurchasesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Products", testProductsAll)
	t.Run("PurchaseItems", testPurchaseItemsAll)
	t.Run("Purchases", testPurchasesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Products", testProductsCount)
	t.Run("PurchaseItems", testPurchaseItemsCount)
	t.Run("Purchases", testPurchasesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Products", testProductsHooks)
	t.Run("PurchaseItems", testPurchaseItemsHooks)
	t.Run("Purchases", testPurchasesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("PurchaseItems", testPurchaseItemsInsert)
	t.Run("PurchaseItems", testPurchaseItemsInsertWhitelist)
	t.Run("Purchases", testPurchasesInsert)
	t.Run("Purchases", testPurchasesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PurchaseItemToProductUsingProduct", testPurchaseItemToOneProductUsingProduct)
	t.Run("PurchaseItemToPurchaseUsingPurchase", testPurchaseItemToOnePurchaseUsingPurchase)
	t.Run("PurchaseToUserUsingUser", testPurchaseToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ProductToPurchaseItems", testProductToManyPurchaseItems)
	t.Run("PurchaseToPurchaseItems", testPurchaseToManyPurchaseItems)
	t.Run("UserToPurchases", testUserToManyPurchases)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PurchaseItemToProductUsingPurchaseItems", testPurchaseItemToOneSetOpProductUsingProduct)
	t.Run("PurchaseItemToPurchaseUsingPurchaseItems", testPurchaseItemToOneSetOpPurchaseUsingPurchase)
	t.Run("PurchaseToUserUsingPurchases", testPurchaseToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("PurchaseItemToProductUsingPurchaseItems", testPurchaseItemToOneRemoveOpProductUsingProduct)
	t.Run("PurchaseItemToPurchaseUsingPurchaseItems", testPurchaseItemToOneRemoveOpPurchaseUsingPurchase)
	t.Run("PurchaseToUserUsingPurchases", testPurchaseToOneRemoveOpUserUsingUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ProductToPurchaseItems", testProductToManyAddOpPurchaseItems)
	t.Run("PurchaseToPurchaseItems", testPurchaseToManyAddOpPurchaseItems)
	t.Run("UserToPurchases", testUserToManyAddOpPurchases)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ProductToPurchaseItems", testProductToManySetOpPurchaseItems)
	t.Run("PurchaseToPurchaseItems", testPurchaseToManySetOpPurchaseItems)
	t.Run("UserToPurchases", testUserToManySetOpPurchases)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ProductToPurchaseItems", testProductToManyRemoveOpPurchaseItems)
	t.Run("PurchaseToPurchaseItems", testPurchaseToManyRemoveOpPurchaseItems)
	t.Run("UserToPurchases", testUserToManyRemoveOpPurchases)
}

func TestReload(t *testing.T) {
	t.Run("Products", testProductsReload)
	t.Run("PurchaseItems", testPurchaseItemsReload)
	t.Run("Purchases", testPurchasesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Products", testProductsReloadAll)
	t.Run("PurchaseItems", testPurchaseItemsReloadAll)
	t.Run("Purchases", testPurchasesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Products", testProductsSelect)
	t.Run("PurchaseItems", testPurchaseItemsSelect)
	t.Run("Purchases", testPurchasesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Products", testProductsUpdate)
	t.Run("PurchaseItems", testPurchaseItemsUpdate)
	t.Run("Purchases", testPurchasesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("PurchaseItems", testPurchaseItemsSliceUpdateAll)
	t.Run("Purchases", testPurchasesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
